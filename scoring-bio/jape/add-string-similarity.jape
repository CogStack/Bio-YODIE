/*
 * add-string-similarity.jape
 *
 * Copyright (c) 1995-2016, The University of Sheffield. See the file
 * COPYRIGHT.txt in the software or at
 * http://gate.ac.uk/gate/COPYRIGHT.txt
 *
 * This file is part of Bio-YODIE (see 
 * https://gate.ac.uk/applications/bio-yodie.html), and is free 
 * software, licenced under the GNU Affero General Public License
 * Version 3, 19 November 2007
 *
 * A copy of this licence is included in the distribution in the file
 * LICENSE-AGPL3.html, and is also available at
 * http://www.gnu.org/licenses/agpl-3.0-standalone.html
 *
 * G. Gorrell, 26 September 2016
 */

Phase: stringSim
Input: Lookup
Options: control=all

// How similar is the label used to retrieve this match
// to the actual text matched?

Rule: stringSim
(
 {Lookup}
)
:match
-->
{
 Annotation match = bindings.get("match").iterator().next();
 String label = match.getFeatures().get("label").toString();
 String string_orig = match.getFeatures().get("string_orig").toString();
 double lev = (new Integer(org.apache.commons.lang.StringUtils.getLevenshteinDistance(label, string_orig))).doubleValue();
 double scStringSimilarity = 1.0 - (lev/(string_orig.length() + label.length()));
 match.getFeatures().put("scStringSimilarity", scStringSimilarity);
}


